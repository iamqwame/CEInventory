@page "/products"
@rendermode  InteractiveServer
@using CEInventory.WebUI.Components.Services
@inject IProductRepository _productRepository


<h3>Products</h3>
<h4 class="mt-4">Add New Product</h4>
<EditForm Model="newProduct" OnValidSubmit="HandleValidSubmit" FormName="newProduct" class="needs-validation" novalidate>
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="mb-3">
        <label for="productName" class="form-label">Name</label>
        <InputText id="productName" @bind-Value="newProduct.Name" class="form-control" />
        <ValidationMessage For="@(() => newProduct.Name)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="productPrice" class="form-label">Price</label>
        <InputNumber id="productPrice" @bind-Value="newProduct.Price" class="form-control" />
        <ValidationMessage For="@(() => newProduct.Price)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="productStock" class="form-label">Stock</label>
        <InputNumber id="productStock" @bind-Value="newProduct.Stock" class="form-control" />
        <ValidationMessage For="@(() => newProduct.Stock)" class="text-danger" />
    </div>

    <button type="submit" class="btn btn-primary">Save Changes</button>
</EditForm>
<br/>

<div class="table-responsive">
    <table class="table table-striped table-sm">
        <thead>
        <tr>
            <th>#</th>
            <th>Name</th>
            <th>Price</th>
            <th>Stock</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        
        @foreach (var product in _products)
        {
            <tr>
                <td>@product.Id</td>
                <td>@product.Name</td>
                <td>@product.Price</td>
                <td>@product.Stock</td>
                <td>
                    <button class="btn btn-primary" @onclick="()=>OnEdit(product)">Edit</button>
                    <button class="btn btn-danger" @onclick="()=>startDeleteProcess(product)" data-toggle="modal" data-target="#deleteModal">Remove</button>

                </td>
            </tr>
        }
        
       

        </tbody>
    </table>
</div>




<!-- Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
               Are you sure you want to delete @newProduct.Name
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
                <button type="button" data-dismiss="modal" @onclick="() => OnDelete()" class="btn btn-primary">Yes</button>
            </div>
        </div>
    </div>
</div>

@code {
     List<Product> _products;

    
     [SupplyParameterFromForm] 
    public Product? newProduct { get; set; }

    protected override async Task OnInitializedAsync()
    {
        newProduct = new Product();
        _products = await _productRepository.GetAllAsync();
    }

    private async Task HandleValidSubmit()
    {
        if(newProduct.Id>0)
            await _productRepository.UpdateAsync(newProduct);
        else
            await _productRepository.AddAsync(newProduct);
        
        _products = await _productRepository.GetAllAsync(); // Refresh the product list
        newProduct = new Product(); // Reset the form
    }


    void OnEdit(Product selectedProduct)
    {
        newProduct = selectedProduct;
    }
    void startDeleteProcess(Product selectedProduct)
    {
        newProduct = selectedProduct;
    }
    async Task OnDelete()
    {
        await _productRepository.DeleteAsync(newProduct.Id);
        
        _products = await _productRepository.GetAllAsync(); // Refresh the product list
        newProduct = new Product(); // Reset the form
    }
}